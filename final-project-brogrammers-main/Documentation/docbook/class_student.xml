<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_student" xml:lang="en-US">
<title>Student Class Reference</title>
<indexterm><primary>Student</primary></indexterm>
<para>

<para>In this class, there are all features and relations between student and courses. </para>
 
</para>
<para>
<computeroutput>#include &lt;student.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for Student:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_student.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_student_1abd15e493097f601f7370a1b3aef89308">Student</link> (std::string name, std::string email, std::string phone, std::string department, int age, int graduation_year)</para>

<para><link linkend="_class_student">Student</link> Class Features. </para>
</listitem>
            <listitem><para>int <link linkend="_class_student_1a002fb1616666065c7b30bacbbf752ead">get_id</link> ()</para>

<para>Get the <link linkend="_class_student">Student</link>&apos;s ID. </para>
</listitem>
            <listitem><para>int <link linkend="_class_student_1a86f99967a2075361bacb151222314c99">getGraduation_year</link> () const</para>

<para>Get the <link linkend="_class_student">Student</link>&apos;s Graduation Year. </para>
</listitem>
            <listitem><para>std::vector&lt; std::string &gt; <link linkend="_class_student_1a944630b99a55b14ee8f9fd1cd05b160f">get_courses</link> ()</para>

<para>Get the <link linkend="_class_student">Student</link>&apos;s Courses. </para>
</listitem>
            <listitem><para>void <link linkend="_class_student_1ab68e20e4d8caf00dc7bb184addf4c559">set_courses</link> (std::string course)</para>

<para>Add a new <link linkend="_class_course">Course</link> to the student profile. </para>
</listitem>
            <listitem><para>std::map&lt; std::string, float &gt; <link linkend="_class_student_1af4265f54c4b2f609d03d3addda30dabb">get_courses_grades</link> ()</para>

<para>Show the student&apos;s Grades. </para>
</listitem>
            <listitem><para>void <link linkend="_class_student_1ac0a784ba5d1e2e338de97fc46c4929fc">set_courses_grades</link> (std::string course, float grade)</para>

<para>Organizing the courses with its crospoinding grade. </para>
</listitem>
            <listitem><para>void <link linkend="_class_student_1a5ec4b2fb9d203c68dca007f7a0863d23">unenroll</link> (std::string)</para>

<para>Remove the course from the student profile. </para>
</listitem>
            <listitem><para>void <link linkend="_class_student_1ac08c909ae88d239c0f599929f83f912d">enroll</link> (std::string)</para>

<para>Adding the course to the student profile. </para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_class_user">User</link>        <itemizedlist>
            <listitem><para><link linkend="_class_user_1ae4fb7fdfda804e2c1e8ead2780a77f3c">User</link> (std::string name, std::string email, std::string phone, std::string department, int age)</para>

<para><link linkend="_class_user">User</link> Class Features. </para>
</listitem>
            <listitem><para><anchor xml:id="_class_user_1a90d4d69ce714062ed416e498ed687614"/><emphasis role="strong">User</emphasis> (std::string name, std::string email, std::string phone, int age)</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_user_1a446a64e63adafbc2e1428532275ad6a1">getName</link> () const</para>

<para>Get the <link linkend="_class_user">User</link>&apos;s Name. </para>
</listitem>
            <listitem><para>std::string <link linkend="_class_user_1a68c520e78268ba63c97ff04b6fb210a1">getEmail</link> () const</para>

<para>Get the <link linkend="_class_user">User</link>&apos;s Email. </para>
</listitem>
            <listitem><para>std::string <link linkend="_class_user_1aa6b3271fff710eee0b406cc270fe7071">getPhone</link> () const</para>

<para>Get the <link linkend="_class_user">User</link>&apos;s Phone. </para>
</listitem>
            <listitem><para>std::string <link linkend="_class_user_1a2da830cf1d7f4f70fb1cdb1cf179a464">getDepartment</link> () const</para>

<para>Get the <link linkend="_class_user">User</link>&apos;s Department. </para>
</listitem>
            <listitem><para>int <link linkend="_class_user_1a71385d4c5a3a509af5024b3c8e1e1aa9">getAge</link> () const</para>

<para>Get the <link linkend="_class_user">User</link>&apos;s Age. </para>
</listitem>
        </itemizedlist>
<section>
<title>Detailed Description</title>

<para>In this class, there are all features and relations between student and courses. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_student_1abd15e493097f601f7370a1b3aef89308"/><section>
    <title>Student()</title>
<indexterm><primary>Student</primary><secondary>Student</secondary></indexterm>
<indexterm><primary>Student</primary><secondary>Student</secondary></indexterm>
<para><computeroutput>Student::Student (std::string name, std::string email, std::string phone, std::string department, int age, int graduation_year)</computeroutput></para><para>

<para><link linkend="_class_student">Student</link> Class Features. </para>
</para>

<para>This class is used to link the data of Students to the database. <formalpara><title>Author</title>

<para>Amir Hesham &amp; Mohammed Alaa </para>
</formalpara>
<formalpara><title>Copyright</title>

<para>Brogrammers. </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_student_1ac08c909ae88d239c0f599929f83f912d"/><section>
    <title>enroll()</title>
<indexterm><primary>enroll</primary><secondary>Student</secondary></indexterm>
<indexterm><primary>Student</primary><secondary>enroll</secondary></indexterm>
<para><computeroutput>void Student::enroll (std::string courseName)</computeroutput></para><para>

<para>Adding the course to the student profile. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Course_Name</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Nothing to be returned </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_student_1a944630b99a55b14ee8f9fd1cd05b160f"/><section>
    <title>get_courses()</title>
<indexterm><primary>get_courses</primary><secondary>Student</secondary></indexterm>
<indexterm><primary>Student</primary><secondary>get_courses</secondary></indexterm>
<para><computeroutput>std::vector&lt; std::string &gt; Student::get_courses ( )</computeroutput></para><para>

<para>Get the <link linkend="_class_student">Student</link>&apos;s Courses. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>NULL</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><link linkend="_class_student">Student</link>&apos;s Courses (the courses which the student enrolled in) </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_student_1af4265f54c4b2f609d03d3addda30dabb"/><section>
    <title>get_courses_grades()</title>
<indexterm><primary>get_courses_grades</primary><secondary>Student</secondary></indexterm>
<indexterm><primary>Student</primary><secondary>get_courses_grades</secondary></indexterm>
<para><computeroutput>std::map&lt; std::string, float &gt; Student::get_courses_grades ( )</computeroutput></para><para>

<para>Show the student&apos;s Grades. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>NULL</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>All the student&apos;s grades </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_student_1a002fb1616666065c7b30bacbbf752ead"/><section>
    <title>get_id()</title>
<indexterm><primary>get_id</primary><secondary>Student</secondary></indexterm>
<indexterm><primary>Student</primary><secondary>get_id</secondary></indexterm>
<para><computeroutput>int Student::get_id ( )</computeroutput></para><para>

<para>Get the <link linkend="_class_student">Student</link>&apos;s ID. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>NULL</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><link linkend="_class_student">Student</link>&apos;s ID </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_student_1a86f99967a2075361bacb151222314c99"/><section>
    <title>getGraduation_year()</title>
<indexterm><primary>getGraduation_year</primary><secondary>Student</secondary></indexterm>
<indexterm><primary>Student</primary><secondary>getGraduation_year</secondary></indexterm>
<para><computeroutput>int Student::getGraduation_year ( ) const</computeroutput></para><para>

<para>Get the <link linkend="_class_student">Student</link>&apos;s Graduation Year. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>NULL</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><link linkend="_class_student">Student</link>&apos;s Graduation Year </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_student_1ab68e20e4d8caf00dc7bb184addf4c559"/><section>
    <title>set_courses()</title>
<indexterm><primary>set_courses</primary><secondary>Student</secondary></indexterm>
<indexterm><primary>Student</primary><secondary>set_courses</secondary></indexterm>
<para><computeroutput>void Student::set_courses (std::string course)</computeroutput></para><para>

<para>Add a new <link linkend="_class_course">Course</link> to the student profile. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>course</entry><entry>
<para>that will be taken by student in this semester </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><link linkend="_class_student">Student</link>&apos;s courses Vector </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_student_1ac0a784ba5d1e2e338de97fc46c4929fc"/><section>
    <title>set_courses_grades()</title>
<indexterm><primary>set_courses_grades</primary><secondary>Student</secondary></indexterm>
<indexterm><primary>Student</primary><secondary>set_courses_grades</secondary></indexterm>
<para><computeroutput>void Student::set_courses_grades (std::string course, float grade)</computeroutput></para><para>

<para>Organizing the courses with its crospoinding grade. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>course</entry><entry>
<para>to be linked with a particular grade </para>
</entry>
                            </row>
                            <row>
<entry>grade</entry><entry>
<para>to be added with a particular course </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><link linkend="_class_student">Student</link>&apos;s course with its grade of the student </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_student_1a5ec4b2fb9d203c68dca007f7a0863d23"/><section>
    <title>unenroll()</title>
<indexterm><primary>unenroll</primary><secondary>Student</secondary></indexterm>
<indexterm><primary>Student</primary><secondary>unenroll</secondary></indexterm>
<para><computeroutput>void Student::unenroll (std::string courseName)</computeroutput></para><para>

<para>Remove the course from the student profile. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Course_Name</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Nothing to be returned </para>
</formalpara>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
F:/CUFE/SBME 2022/First Term/Data Structure/Final Project/Mo3id REPO/final-project-brogrammers/models/student.hF:/CUFE/SBME 2022/First Term/Data Structure/Final Project/Mo3id REPO/final-project-brogrammers/models/student.cpp</section>
</section>
